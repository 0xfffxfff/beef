{
  "address": "0x5DF181774C478f891a6E0bd4c3aF453F9bAeE8D6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Codependent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CurrentlyClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "HalfOfTheTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MutuallyExclusive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoBeef",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotChromatic",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotCoinbase",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotContinuous",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotDark",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotFairPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotLight",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "artist",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyAtFairPrice",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decreasable",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decrease",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "editionSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fairPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "increasable",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "increase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOpenHours",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "renderSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "renderSVGBase64",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_editionTokenRangeStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_editionSize",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "_title",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32[]",
              "name": "_bodyText",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "_smallPrintText",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "_statusText",
              "type": "bytes32[]"
            }
          ],
          "internalType": "struct ConceptStruct.Concept[]",
          "name": "_concepts",
          "type": "tuple[]"
        }
      ],
      "name": "setConceptData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transfersLeft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateTransitory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "whereIs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "z",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd9b142a47883c54d20416cf4f0eb5d721fce4cce2563ca7cdec89dd0de10bb81",
  "receipt": {
    "to": null,
    "from": "0xfffbf521b5B7cf1a37B1dD5BDf16dae31F423fFf",
    "contractAddress": "0x5DF181774C478f891a6E0bd4c3aF453F9bAeE8D6",
    "transactionIndex": 112,
    "gasUsed": "10600087",
    "logsBloom": "0x
    "blockHash": "0x57b4fef2ad2f220eebfc22642524d8bab502db8807699fe2a9cecded6aaed70b",
    "transactionHash": "0xd9b142a47883c54d20416cf4f0eb5d721fce4cce2563ca7cdec89dd0de10bb81",
    "logs": [
      {
        "transactionIndex": 112,
        "blockNumber": 17436672,
        "transactionHash": "0xd9b142a47883c54d20416cf4f0eb5d721fce4cce2563ca7cdec89dd0de10bb81",
        "address": "0x5DF181774C478f891a6E0bd4c3aF453F9bAeE8D6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fffbf521b5b7cf1a37b1dd5bdf16dae31f423fff"
        ],
        "data": "0x",
        "logIndex": 269,
        "blockHash": "0x57b4fef2ad2f220eebfc22642524d8bab502db8807699fe2a9cecded6aaed70b"
      },
      {
        "transactionIndex": 112,
        "blockNumber": 17436672,
        "transactionHash": "0xd9b142a47883c54d20416cf4f0eb5d721fce4cce2563ca7cdec89dd0de10bb81",
        "address": "0x5DF181774C478f891a6E0bd4c3aF453F9bAeE8D6",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000690b9a9e9aa1c9db991c7721a92d351db4fac990",
          "0x000000000000000000000000000000000000000000000000000000000000002a"
        ],
        "data": "0x",
        "logIndex": 270,
        "blockHash": "0x57b4fef2ad2f220eebfc22642524d8bab502db8807699fe2a9cecded6aaed70b"
      }
    ],
    "blockNumber": 17436672,
    "cumulativeGasUsed": "20142466",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "239d5b7954931760928f66b2da52f746",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Codependent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CurrentlyClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HalfOfTheTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MutuallyExclusive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoBeef\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotChromatic\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCoinbase\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotContinuous\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDark\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFairPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotLight\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAtFairPrice\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decreasable\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decrease\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"editionSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fairPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increasable\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOpenHours\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"renderSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"renderSVGBase64\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_editionTokenRangeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_editionSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_title\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_bodyText\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_smallPrintText\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_statusText\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct ConceptStruct.Concept[]\",\"name\":\"_concepts\",\"type\":\"tuple[]\"}],\"name\":\"setConceptData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfersLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateTransitory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"whereIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Beef.sol\":\"Beef\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Beef.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.15;\\n\\n////////////////////////////////////////////////////////////////////////\\n//                                                                    //\\n//                                                                    //\\n//                                                                    //\\n//                                                                    //\\n//                                                                    //\\n//                                                                    //\\n//                                                                    //\\n//                     need no permission                             //\\n//                     grazing on the lush grass hills                //\\n//                     both beef and babe chew                        //\\n//                                                                    //\\n//                                                                    //\\n//                                                                    //\\n//                                                                    //\\n//                                                                    //\\n//                                                       0xfff.eth    //\\n//                                                                    //\\n////////////////////////////////////////////////////////////////////////\\n\\nimport \\\"./BeefERC721.sol\\\";\\n\\nimport {ConceptStruct} from \\\"../libraries/ConceptStruct.sol\\\";\\nimport {Render} from \\\"../libraries/Render.sol\\\";\\nimport {Util} from \\\"../libraries/Util.sol\\\";\\n\\nuint256 constant PERMISSIONLESS = 1;\\nuint256 constant NO_EXTERNALITIES = 2;\\nuint256 constant OPENING_HOURS = 3;\\nuint256 constant DEAD_BEEF = 4;\\nuint256 constant MUTUAL_A = 5;\\nuint256 constant MUTUAL_B = 6;\\nuint256 constant FAIR_PRICE = 7;\\nuint256 constant BEEF_BABE = 8;\\nuint256 constant SATED = 9;\\nuint256 constant DARK = 10;\\nuint256 constant RETRACTED = 11;\\nuint256 constant BAD_BEEF = 12;\\nuint256 constant EOA = 13;\\nuint256 constant SAMEBLOCK_I = 14;\\nuint256 constant SAMEBLOCK_II = 15;\\nuint256 constant SAMEBLOCK_III = 16;\\nuint256 constant LIMITED_USE = 17;\\nuint256 constant DEAF_BABE = 18;\\nuint256 constant DECREASE = 19;\\nuint256 constant SECRET_POEM = 20;\\nuint256 constant LOCUS = 21;\\nuint256 constant PERMANENCE_I = 22;\\nuint256 constant BEEF_BEEF = 23;\\nuint256 constant DEPENDENT_A = 24;\\nuint256 constant DEPENDENT_B = 25;\\nuint256 constant LIGHT = 26;\\nuint256 constant INCREASE = 27;\\nuint256 constant DEAD_BABE = 28;\\nuint256 constant CONTINUOUS = 29;\\nuint256 constant SECRET_JOKE = 30;\\nuint256 constant PERMANENCE_II = 31;\\nuint256 constant DEAF_BEEF = 32;\\nuint256 constant MAXIMALISM = 33;\\nuint256 constant COINBASE = 34;\\nuint256 constant BABE_BEEF = 35;\\nuint256 constant BEEF_FACE = 36;\\nuint256 constant FEED_BEEF = 37;\\nuint256 constant SECRET_TRUTH = 38;\\nuint256 constant CHROMATIC = 39;\\nuint256 constant UNWIELDY = 40;\\nuint256 constant BAD_BABE = 41;\\nuint256 constant TRANSITORY_OWNERSHIP = 42;\\n\\nerror NoBeef();\\nerror CurrentlyClosed();\\nerror HalfOfTheTime();\\nerror Codependent();\\nerror MutuallyExclusive();\\nerror NotFairPrice();\\nerror NotLight();\\nerror NotDark();\\nerror NotChromatic();\\nerror NotContract();\\nerror NotCoinbase();\\nerror NotContinuous();\\n\\ncontract Beef is BeefERC721 {\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             Constructor\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor() BeefERC721(\\\"BEEF\\\", \\\"BEEF\\\") {\\n        _mint(block.coinbase, TRANSITORY_OWNERSHIP);\\n        totalSupply++;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Tokens / Mint\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply = 0;\\n    uint256 public editionSize = 42;\\n    uint256 constant public price = 0.1 ether;\\n\\n    function mint(uint256 _tokenId) external payable {\\n        require(_tokenId > 0 && _tokenId <= editionSize); // starts at 1\\n        uint256 mintPrice = (_tokenId == UNWIELDY ? (1 ether + price) : price);\\n        require(msg.value == mintPrice);\\n        _mint(msg.sender, _tokenId);\\n        totalSupply++;\\n    }\\n\\n    function withdraw(address payable _to) public onlyArtist {\\n        (bool success,) = _to.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Concept Data\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping (uint256 => ConceptStruct.Concept) concepts;\\n    mapping (uint256 => uint256) tokenIdToConcept;\\n\\n    function setConceptData(ConceptStruct.Concept[] memory _concepts) public onlyArtist {\\n        for (uint i = 0; i < _concepts.length; i++) {\\n            ConceptStruct.Concept memory concept = _concepts[i];\\n            uint256 conceptId = concept._editionTokenRangeStart;\\n            concepts[conceptId] = concept;\\n            for (uint j = concept._editionTokenRangeStart; j < concept._editionTokenRangeStart + concept._editionSize; j++) {\\n                tokenIdToConcept[j] = conceptId;\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Custom State\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping (uint256 => uint256) sameBlockAt;\\n    mapping (uint256 => address) sameBlockTo;\\n    uint256 public fairPrice = 0.1 ether;\\n    uint96 public increasable = 1;\\n    uint96 public decreasable = 1111111111111111111111111111;\\n    uint256 public transfersLeft = 7;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Custom Methods\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function buyAtFairPrice() external payable {\\n        // Anyone can buy at fair price\\n        if (_ownerOf[FAIR_PRICE] == address(0)) {\\n            if (msg.value < fairPrice) revert NotFairPrice();\\n            _mint(msg.sender, FAIR_PRICE);\\n        } else if (msg.value > fairPrice) {\\n            fairPrice = msg.value;\\n            _transferFromInternal(_ownerOf[FAIR_PRICE], msg.sender, FAIR_PRICE);\\n        } else {\\n            revert NotFairPrice();\\n        }\\n    }\\n\\n    function increase() external payable {\\n        // Anyone can increase\\n        increasable++;\\n    }\\n\\n    function decrease() external payable {\\n        // Anyone can decrease\\n        decreasable--;\\n    }\\n\\n    function retract() external onlyArtist {\\n        // The artist can retract this piece at any time\\n        _transferFromInternalNoHooksAndChecks(_ownerOf[RETRACTED], artist(), RETRACTED);\\n    }\\n\\n    function isOpenHours() public view returns (bool) {\\n        // Opening hours are from  9-5 UTC\\n        uint256 daytime = block.timestamp % (24 * 3600);\\n        return (daytime >= 9 * 3600) && (daytime <= 17 * 3600);\\n    }\\n\\n    function whereIs(address _address) public pure returns (uint256 x, uint256 y , uint256 z) {\\n        // This piece will output three spacial coordinates for the current address.\\n        // It can be used to spacially relate addresses\\n        uint256 addressNumber = uint256(keccak256(abi.encodePacked(_address)));\\n        x = addressNumber % 10e4;\\n        y = (addressNumber >> 8) % 10e4;\\n        z = (addressNumber >> 16) % 10e3;\\n    }\\n\\n    function updateTransitory() external {\\n        _transferFromInternal(_ownerOf[TRANSITORY_OWNERSHIP], block.coinbase, TRANSITORY_OWNERSHIP);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          Hooks and Overrides\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function ownerOf(uint256 id) public view override returns (address) {\\n        if (id == TRANSITORY_OWNERSHIP) {\\n            return block.coinbase;\\n        } else if (\\n            (id == PERMANENCE_I  && block.number % 2 == 0) ||\\n            (id == PERMANENCE_II && block.number % 2 == 1)\\n        ) {\\n            revert HalfOfTheTime();\\n        } else if (id == OPENING_HOURS) {\\n            if(!isOpenHours()) revert CurrentlyClosed();\\n        }\\n        return super.ownerOf(id);\\n    }\\n\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == block.coinbase) {\\n            return 1 + _balanceOf[owner];\\n        }\\n        return super.balanceOf(owner);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public override payable {\\n        if (id == PERMISSIONLESS) {\\n            _transferFromInternal(from, to, id);\\n        } else if (id == TRANSITORY_OWNERSHIP) {\\n            _transferFromInternal(from, to, id);\\n        } else {\\n            super.transferFrom(from, to, id);\\n        }\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public override payable {\\n        if (id == PERMISSIONLESS) {\\n            _transferFromInternal(from, to, id);\\n        } else if (id == TRANSITORY_OWNERSHIP) {\\n            _transferFromInternal(from, to, id);\\n        } else {\\n            super.transferFrom(from, to, id);\\n        }\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes calldata data\\n    ) public override payable {\\n        if (id == PERMISSIONLESS) {\\n            _transferFromInternal(from, to, id);\\n        } else if (id == TRANSITORY_OWNERSHIP) {\\n            _transferFromInternal(from, to, id);\\n        } else {\\n            super.transferFrom(from, to, id);\\n        }\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override {}\\n\\n    function _beforeTokenTransfer(\\n        address /* from */,\\n        address to,\\n        uint256 tokenId\\n    ) internal override returns (bool) {\\n        if (tokenId == SATED) {\\n\\n            // PERMANENCE SATED\\n            // This piece can only be transfered as the only transaction in a block\\n            uint256 waste; for (uint256 i = 0; i < 159160; i++) waste++;\\n\\n        } else if (\\n            (tokenId == PERMANENCE_I  && block.number % 2 == 0) ||\\n            (tokenId == PERMANENCE_II && block.number % 2 == 1)\\n        ) {\\n\\n            // PERMANENCE I & II\\n            // This piece exists half of the time\\n            revert HalfOfTheTime();\\n\\n        } else if (tokenId == TRANSITORY_OWNERSHIP) {\\n\\n            // TRANSITORY OWNERSHIP\\n            // This piece will always belong to the current validator\\n            require(to == block.coinbase);\\n\\n        } else if (tokenId == OPENING_HOURS) {\\n\\n            // OPENING HOURS\\n            // This piece has opening hours during which it exists and can be transferred\\n            if (!isOpenHours()) revert CurrentlyClosed();\\n\\n        } else if (tokenId == DEAD_BEEF || tokenId == BEEF_BEEF || tokenId == FEED_BEEF || tokenId == DEAF_BEEF\\n                || tokenId == BAD_BEEF  || tokenId == BEEF_FACE || tokenId == BABE_BEEF || tokenId == BEEF_BABE\\n                || tokenId == BAD_BABE  || tokenId == DEAF_BABE || tokenId == DEAD_BABE\\n        ) {\\n\\n            // DEAD BEEF\\n            // This piece can only be held by an address starting with DEAD and ending with BEEF\\n            bytes20 addr = bytes20(to);\\n            if (\\n                (\\n                    (tokenId == DEAD_BEEF && (addr & hex\\\"ffff00000000000000000000000000000000ffff\\\" == hex\\\"dead00000000000000000000000000000000beef\\\"))\\n                    ||\\n                    (tokenId == BEEF_BEEF && (addr & hex\\\"ffff00000000000000000000000000000000ffff\\\" == hex\\\"beef00000000000000000000000000000000beef\\\"))\\n                    ||\\n                    (tokenId == FEED_BEEF && (addr & hex\\\"ffff00000000000000000000000000000000ffff\\\" == hex\\\"feed00000000000000000000000000000000beef\\\"))\\n                    ||\\n                    (tokenId == DEAF_BEEF && (addr & hex\\\"ffff00000000000000000000000000000000ffff\\\" == hex\\\"deaf00000000000000000000000000000000beef\\\"))\\n                    ||\\n                    (tokenId == BAD_BEEF && (addr & hex\\\"fff000000000000000000000000000000000ffff\\\" == hex\\\"bad000000000000000000000000000000000beef\\\"))\\n                    ||\\n                    (tokenId == BEEF_FACE && (addr & hex\\\"ffff00000000000000000000000000000000ffff\\\" == hex\\\"beef00000000000000000000000000000000face\\\"))\\n                    ||\\n                    (tokenId == BABE_BEEF && (addr & hex\\\"ffff00000000000000000000000000000000ffff\\\" == hex\\\"babe00000000000000000000000000000000beef\\\"))\\n                    ||\\n                    (tokenId == BEEF_BABE && (addr & hex\\\"ffff00000000000000000000000000000000ffff\\\" == hex\\\"beef00000000000000000000000000000000babe\\\"))\\n                    ||\\n                    (tokenId == BAD_BABE && (addr & hex\\\"fff000000000000000000000000000000000ffff\\\" == hex\\\"bad000000000000000000000000000000000babe\\\"))\\n                    ||\\n                    (tokenId == DEAF_BABE && (addr & hex\\\"ffff00000000000000000000000000000000ffff\\\" == hex\\\"deaf00000000000000000000000000000000babe\\\"))\\n                    ||\\n                    (tokenId == DEAD_BABE && (addr & hex\\\"ffff00000000000000000000000000000000ffff\\\" == hex\\\"dead00000000000000000000000000000000babe\\\"))\\n                ) == false\\n            ) {\\n                revert NoBeef();\\n            }\\n\\n        } else if (tokenId >= SAMEBLOCK_I && tokenId <= SAMEBLOCK_III) {\\n\\n            // SAME BLOCK\\n            // The three pieces from this edition can only be transferred in the same block\\n            uint256 dependentIdA = tokenId == SAMEBLOCK_I ? SAMEBLOCK_II : SAMEBLOCK_I;\\n            uint256 dependentIdB = tokenId == SAMEBLOCK_I ? SAMEBLOCK_III : tokenId == SAMEBLOCK_II ? SAMEBLOCK_III : SAMEBLOCK_II;\\n            if (sameBlockAt[dependentIdA] == block.number && sameBlockAt[dependentIdB] == block.number) {\\n                _ownerOf[dependentIdA] == address(0)\\n                    ? _mintNoHooks(sameBlockTo[dependentIdA], dependentIdA)\\n                    : _transferFromInternalNoHooksAndChecks(_ownerOf[dependentIdA], sameBlockTo[dependentIdA], dependentIdA);\\n                _ownerOf[dependentIdB] == address(0)\\n                    ? _mintNoHooks(sameBlockTo[dependentIdB], dependentIdB)\\n                    : _transferFromInternalNoHooksAndChecks(_ownerOf[dependentIdB], sameBlockTo[dependentIdB], dependentIdB);\\n                return true;\\n            } else {\\n                sameBlockAt[tokenId] = block.number;\\n                sameBlockTo[tokenId] = to;\\n                return false;\\n            }\\n\\n        } else if (tokenId == DEPENDENT_A || tokenId == DEPENDENT_B) {\\n\\n            // CO-DEPENDENT\\n            // The two pieces of this edition are co-dependent. A piece can only be acquired if the sum of the\\n            // first three and of the last three digits of both the owning addresses are smaller than or equal\\n            // to 0xFFF = 4095 respectively\\n            uint256 dependentId = tokenId == DEPENDENT_A ? DEPENDENT_B : DEPENDENT_A;\\n            if (\\n                (\\n                    uint160(_ownerOf[dependentId]) % 4096 + uint160(to) % 4096 < 4096\\n                    &&\\n                    uint160(bytes20(_ownerOf[dependentId]) >> 148) % 4096 + uint160(bytes20(to) >> 148) % 4096 < 4096\\n                ) == false\\n            ) {\\n                revert Codependent();\\n            }\\n\\n        } else if (tokenId == MUTUAL_A || tokenId == MUTUAL_B) {\\n\\n            // MUTUALLY EXCLUSIVE\\n            // The two pieces of this edition are mutually exclusive. Each piece can only be\\n            // owned if the other owning address has no matching digits\\n            uint256 dependentId = tokenId == MUTUAL_A ? MUTUAL_B : MUTUAL_A;\\n            bytes20 bytesDependent = bytes20(_ownerOf[dependentId]);\\n            bytes20 bytesTo = bytes20(to);\\n            for (uint i = 0; i < 40; i++) {\\n                if (uint160(bytesDependent >> i * 4) % 16 == uint160(bytesTo >> i * 4) % 16) {\\n                    revert MutuallyExclusive();\\n                }\\n            }\\n\\n        } else if (tokenId == LIGHT) {\\n\\n            // LIGHT\\n            // This piece can only be held by addresses containing at least 13 instances of F and no instances of 0\\n            bytes20 bytesTo = bytes20(to);\\n            uint16 count;\\n            for (uint i ; i < 40; i++) {\\n                if (uint160(bytesTo >> i * 4) % 16 == 0) break;\\n                if (uint160(bytesTo >> i * 4) % 16 == 15) count++;\\n                if (count > 13) return true;\\n            }\\n            revert NotLight();\\n\\n        } else if (tokenId == DARK) {\\n\\n            // DARK\\n            // This piece can only be held by addresses containing at least 13 instances of 0 and no instances of F\\n            bytes20 bytesTo = bytes20(to);\\n            uint16 count;\\n            for (uint i ; i < 40; i++) {\\n                if (uint160(bytesTo >> i * 4) % 16 == 15) break;\\n                if (uint160(bytesTo >> i * 4) % 16 == 0) count++;\\n                if (count > 13) return true;\\n            }\\n            revert NotDark();\\n\\n        } else if (tokenId == CHROMATIC) {\\n\\n            // CHROMATIC\\n            // This piece can only be held by addresses containg at least 1 of each hexadecimal digit\\n            bytes20 bytesTo = bytes20(to);\\n            uint256 bitmap;\\n            for (uint256 i; i < 40; i++) {\\n                bitmap |= (1 << (uint160(bytesTo >> i * 4) % 16));\\n                if (bitmap == 65535) return true;\\n            }\\n            revert NotChromatic();\\n\\n        } else if (tokenId == NO_EXTERNALITIES) {\\n\\n            // NO EXTERNALITIES\\n            // This piece can only be held by a contract\\n            uint size;\\n            assembly { size := extcodesize(to) }\\n            if (size == 0) revert NotContract();\\n\\n        } else if (tokenId == EOA) {\\n\\n            // EOA\\n            // This piece cannot be held by a contract\\n            uint size;\\n            assembly { size := extcodesize(to) }\\n            require(size == 0);\\n            require(tx.origin == msg.sender);\\n\\n        } else if (tokenId == LIMITED_USE) {\\n\\n            // LIMITED USE\\n            // This piece can only be transfered 7 times after which it will self destruct\\n            if (transfersLeft > 0) {\\n                transfersLeft--;\\n            } else {\\n                // bye\\n                _transferFromInternalNoHooksAndChecks(_ownerOf[LIMITED_USE], address(0xdEaD), LIMITED_USE);\\n                return false; // don't transfer\\n            }\\n\\n        } else if (tokenId == UNWIELDY) {\\n\\n            // UNWIELDY\\n            // This piece requires burning 1 ETH to be transfered.\\n            require(msg.value >= 1 ether && msg.value <= 1 ether + price);\\n            (bool success,) = address(0).call{value: 1 ether}(\\\"\\\"); // good bye\\n            require (success);\\n\\n        } else if (tokenId == COINBASE) {\\n\\n            // COINBASE\\n            // This piece can only transfered to the block.coinbase address.\\n            // As such it can only be received by validators\\n            if (to != block.coinbase) revert NotCoinbase();\\n\\n        } else if (tokenId == CONTINUOUS) {\\n\\n            // CONTINUOUS\\n            // This piece can only be transfered to an address that has the\\n            // first three digits of the previous address as its last three\\n            bytes20 bytesFrom = bytes20(_ownerOf[CONTINUOUS]);\\n            bytes20 bytesTo = bytes20(to);\\n            for (uint i = 0; i < 3; i++) {\\n                if (uint160(bytesFrom >> (i) * 4) % 16 != uint160(bytesTo >> (40 - (3 - i)) * 4) % 16) {\\n                    revert NotContinuous();\\n                }\\n            }\\n\\n        }\\n\\n        return true;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    // Metadata\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    function renderSVG(uint256 _tokenId) external view returns (string memory) {\\n        ConceptStruct.Concept memory concept = _getConceptFromTokenId(_tokenId);\\n        return Render.renderSVG(_tokenId, concept, font);\\n    }\\n\\n    function renderSVGBase64(uint256 _tokenId) external view returns (string memory) {\\n        ConceptStruct.Concept memory concept = _getConceptFromTokenId(_tokenId);\\n        return Render.renderSVGBase64(_tokenId, concept, font);\\n    }\\n\\n    function tokenURI(uint256 _tokenId) public view override returns (string memory) {\\n        if (\\n            (_tokenId == PERMANENCE_I  && block.number % 2 == 0) ||\\n            (_tokenId == PERMANENCE_II && block.number % 2 == 1)\\n        ) {\\n            revert HalfOfTheTime();\\n        } else if (_tokenId == OPENING_HOURS) {\\n            if(!isOpenHours()) revert CurrentlyClosed();\\n        }\\n        require(_ownerOf[_tokenId] != address(0), \\\"NOT_MINTED\\\");\\n        ConceptStruct.Concept memory concept = _getConceptFromTokenId(_tokenId);\\n        return Render.tokenURI(_tokenId, concept, font);\\n    }\\n\\n    function _getConceptFromTokenId(uint256 _tokenId) private view returns (ConceptStruct.Concept memory) {\\n        uint256 conceptId = tokenIdToConcept[_tokenId];\\n        ConceptStruct.Concept memory concept = concepts[conceptId];\\n\\n        if (_tokenId == FAIR_PRICE) {\\n\\n            bytes32[] memory statusText = new bytes32[](1);\\n            statusText[0] = bytes32(abi.encodePacked(\\\"Price: \\\", Util.uint256ToString(uint256(fairPrice / 10e17)), \\\".\\\", Util.uint256ToString(uint256((fairPrice / 10e16) % 10)), (fairPrice / 10e15) % 10 == 0 ? \\\"\\\" : Util.uint256ToString(uint256((fairPrice / 10e15) % 10)), \\\" ETH\\\"));\\n            concept._statusText = statusText;\\n\\n        } else if (_tokenId == LIMITED_USE) {\\n\\n            bytes32[] memory statusText = new bytes32[](1);\\n            statusText[0] = bytes32(abi.encodePacked(\\\"Transfers Left: \\\", Util.uint256ToString(uint256(transfersLeft))));\\n            concept._statusText = statusText;\\n\\n        } else if (_tokenId == INCREASE) {\\n\\n            concept._title = bytes32(abi.encodePacked(Util.uint256ToString(uint256(increasable))));\\n\\n        } else if (_tokenId == DECREASE) {\\n\\n            concept._title = bytes32(abi.encodePacked(Util.uint256ToString(uint256(decreasable))));\\n\\n        } else if (_tokenId == OPENING_HOURS) {\\n\\n            bytes32[] memory statusText = new bytes32[](1);\\n            statusText[0] = bytes32(abi.encodePacked(\\\"Currently \\\", isOpenHours() ? \\\"Open\\\" : \\\"Closed\\\"));\\n            concept._statusText = statusText;\\n\\n        } else if (_tokenId == LOCUS) {\\n\\n            bytes32[] memory statusText = new bytes32[](3);\\n            uint256 x; uint256 y; uint256 z;\\n            (x,y,z) = whereIs(_ownerOf[_tokenId]);\\n            statusText[0] = bytes32(abi.encodePacked(\\n                Util.uint256ToString(x), \\\", \\\",\\n                Util.uint256ToString(y), \\\", \\\",\\n                Util.uint256ToString(z)\\n            ));\\n            concept._statusText = statusText;\\n\\n        }\\n\\n        return concept;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    // Font\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    string private font = \\\"data:application/font-woff2;charset=utf-8;base64,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\\\";\\n\\n}\\n\",\"keccak256\":\"0x131b55a983c1d1a6ac164eb6062a9be3dc3244afda48b8446b30134b2d5df39d\",\"license\":\"AGPL-3.0-only\"},\"contracts/BeefERC721.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @notice Adopted from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\nabstract contract BeefERC721 is Ownable {\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         ERC721 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    mapping(uint256 => address) public getApproved;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    mapping(uint256 => address) internal _ownerOf;\\n\\n    mapping(address => uint256) internal _balanceOf;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                  VIEW\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\n\\n\\n    function ownerOf(uint256 id) public view virtual returns (address) {\\n        address owner = _ownerOf[id];\\n        require(owner != address(0), \\\"NOT_MINTED\\\");\\n        return owner;\\n    }\\n\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        require(owner != address(0), \\\"ZERO_ADDRESS\\\");\\n        return _balanceOf[owner];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 VANITY\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function artist() public view returns (address) {\\n        return owner();\\n    }\\n\\n    modifier onlyArtist {\\n        require(msg.sender == artist());\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC721 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 id) public virtual {\\n        address owner = _ownerOf[id];\\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        getApproved[id] = spender;\\n\\n        emit Approval(owner, spender, id);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual payable {\\n        require(\\n            msg.sender == from || isApprovedForAll[from][msg.sender] || msg.sender == getApproved[id],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        _transferFromInternal(from, to, id);\\n    }\\n\\n    function _transferFromInternal(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) internal virtual {\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n        require(from == _ownerOf[id], \\\"WRONG_FROM\\\");\\n\\n        bool doTransfer = _beforeTokenTransfer(from, to, id);\\n        if (!doTransfer) return;\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        unchecked {\\n            _balanceOf[from]--;\\n\\n            _balanceOf[to]++;\\n        }\\n\\n        _ownerOf[id] = to;\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(from, to, id);\\n\\n        _afterTokenTransfer(from, to, id);\\n    }\\n\\n    function _transferFromInternalNoHooksAndChecks(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) internal virtual {\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        unchecked {\\n            _balanceOf[from]--;\\n\\n            _balanceOf[to]++;\\n        }\\n\\n        _ownerOf[id] = to;\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(from, to, id);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual payable;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes calldata data\\n    ) public virtual payable;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 id) internal virtual {\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n        require(_ownerOf[id] == address(0), \\\"ALREADY_MINTED\\\");\\n\\n        bool doTransfer =_beforeTokenTransfer(address(0), to, id);\\n        if (!doTransfer) return;\\n\\n        // Counter overflow is incredibly unrealistic.\\n        unchecked {\\n            _balanceOf[to]++;\\n        }\\n\\n        _ownerOf[id] = to;\\n\\n        emit Transfer(address(0), to, id);\\n\\n        _afterTokenTransfer(address(0), to, id);\\n    }\\n\\n    function _mintNoHooks(address to, uint256 id) internal virtual {\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n        require(_ownerOf[id] == address(0), \\\"ALREADY_MINTED\\\");\\n\\n        // Counter overflow is incredibly unrealistic.\\n        unchecked {\\n            _balanceOf[to]++;\\n        }\\n\\n        _ownerOf[id] = to;\\n\\n        emit Transfer(address(0), to, id);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual returns (bool) {}\\n\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL SAFE MINT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\nabstract contract ERC721TokenReceiver {\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return ERC721TokenReceiver.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x32724fb46d2657f4878e7758f4f098d7d0177dacd109808d4f6770afd643f656\",\"license\":\"AGPL-3.0-only\"},\"libraries/Background.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {SVG} from \\\"./SVG.sol\\\";\\nimport {Util} from \\\"./Util.sol\\\";\\n\\nlibrary Background {\\n    /*//////////////////////////////////////////////////////////////\\n                                 RENDER\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function render(bool isBeef) internal pure returns (string memory) {\\n        return\\n            SVG.element(\\n                \\\"rect\\\",\\n                SVG.rectAttributes({\\n                    _width: \\\"100%\\\",\\n                    _height: \\\"100%\\\",\\n                    _fill: isBeef ? \\\"#BA2219\\\" : \\\"#000\\\",\\n                    _attributes: \\\"\\\"\\n                })\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x11b0ca50c5605502151b7936871698052426e6bc774eac5a1ba64dbe2ad83410\",\"license\":\"Unlicense\"},\"libraries/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    function encode(string memory _data) internal pure returns (string memory) {\\n        return encode(bytes(_data));\\n    }\\n\\n    function encode(bytes memory _data) internal pure returns (string memory) {\\n        if (_data.length == 0) return \\\"\\\";\\n\\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((_data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := _data\\n            let endPtr := add(dataPtr, mload(_data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {\\n\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                dataPtr := add(dataPtr, 3)\\n\\n                // read 3 bytes\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(input, 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(_data), 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x434612651f09ac54d50a23b308c5ef7aecdd3ed53d5b724bec2d561396390ec8\",\"license\":\"MIT\"},\"libraries/ConceptStruct.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nlibrary ConceptStruct {\\n    struct Concept {\\n        uint256 _editionTokenRangeStart;\\n        uint256 _editionSize;\\n        bytes32 _title;\\n        bytes32[] _bodyText;\\n        bytes32[] _smallPrintText;\\n        bytes32[] _statusText;\\n    }\\n}\",\"keccak256\":\"0xaa8a912bdd3133ae7c6769d3b89861c137d2c8ebe47fdbcec0e867531db80fa2\",\"license\":\"Unlicense\"},\"libraries/Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {Base64} from \\\"./Base64.sol\\\";\\nimport {Util} from \\\"./Util.sol\\\";\\n\\nlibrary Metadata {\\n    string constant JSON_BASE64_HEADER = \\\"data:application/json;base64,\\\";\\n    string constant SVG_XML_BASE64_HEADER = \\\"data:image/svg+xml;base64,\\\";\\n\\n    function encodeMetadata(\\n        uint256 _tokenId,\\n        string memory _name,\\n        string memory _description,\\n        // string memory _attributes,\\n        // string memory _backgroundColor,\\n        string memory _svg\\n    ) internal pure returns (string memory) {\\n        string memory metadata = string.concat(\\n            \\\"{\\\",\\n            Util.keyValue(\\\"tokenId\\\", Util.uint256ToString(_tokenId)),\\n            \\\",\\\",\\n            Util.keyValue(\\\"name\\\", _name),\\n            \\\",\\\",\\n            Util.keyValue(\\\"description\\\", _description),\\n            // \\\",\\\",\\n            // Util.keyValueNoQuotes(\\\"attributes\\\", _attributes),\\n            // \\\",\\\",\\n            // Util.keyValue(\\\"backgroundColor\\\", _backgroundColor),\\n            \\\",\\\",\\n            Util.keyValue(\\\"image\\\", _encodeSVG(_svg)),\\n            \\\"}\\\"\\n        );\\n\\n        return _encodeJSON(metadata);\\n    }\\n\\n    /// @notice base64 encode json\\n    /// @param _json, stringified json\\n    /// @return string, bytes64 encoded json with prefix\\n    function _encodeJSON(string memory _json) internal pure returns (string memory) {\\n        return string.concat(JSON_BASE64_HEADER, Base64.encode(_json));\\n    }\\n\\n    /// @notice base64 encode svg\\n    /// @param _svg, stringified json\\n    /// @return string, bytes64 encoded svg with prefix\\n    function _encodeSVG(string memory _svg) internal pure returns (string memory) {\\n        return string.concat(SVG_XML_BASE64_HEADER, Base64.encode(bytes(_svg)));\\n    }\\n}\\n\",\"keccak256\":\"0x3489bf7e2f8aceaca6ad63660391bfc8e6ab6adcf20b82475e7a267880370826\",\"license\":\"Unlicense\"},\"libraries/Render.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {Metadata} from \\\"./Metadata.sol\\\";\\nimport {Util} from \\\"./Util.sol\\\";\\nimport {Traits} from \\\"./Traits.sol\\\";\\nimport {Background} from \\\"./Background.sol\\\";\\nimport {TextBody} from \\\"./TextBody.sol\\\";\\nimport {TextLine} from \\\"./TextLine.sol\\\";\\nimport {TextEdition} from \\\"./TextEdition.sol\\\";\\nimport {TextOf} from \\\"./TextOf.sol\\\";\\nimport {Traits} from \\\"./Traits.sol\\\";\\nimport {SVG} from \\\"./SVG.sol\\\";\\nimport {ConceptStruct} from \\\"./ConceptStruct.sol\\\";\\n\\n/// @notice Adopted from Bibos (0xf528e3381372c43f5e8a55b3e6c252e32f1a26e4)\\nlibrary Render {\\n    string public constant description =\\n        \\\"The BEEF series.\\\";\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                TOKENURI\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function tokenURI(uint256 _tokenId, ConceptStruct.Concept memory concept, string memory base64font) internal pure returns (string memory) {\\n        bytes memory descriptionConcat;\\n        for (uint i = 0; i < concept._bodyText.length; i++) {\\n            descriptionConcat = abi.encodePacked(descriptionConcat, Util.bytes32ToBytes(concept._bodyText[i]));\\n        }\\n        return\\n            Metadata.encodeMetadata({\\n                _tokenId: _tokenId,\\n                _name: Util.bytes32ToString(concept._title),\\n                _description: string(abi.encodePacked(descriptionConcat)),\\n                _svg: _svg(_tokenId, concept, base64font)\\n            });\\n    }\\n\\n    function renderSVG(uint256 _tokenId, ConceptStruct.Concept memory concept, string memory base64font) internal pure returns (string memory) {\\n        return _svg(_tokenId, concept, base64font);\\n    }\\n\\n    function renderSVGBase64(uint256 _tokenId, ConceptStruct.Concept memory concept, string memory base64font) internal pure returns (string memory) {\\n        return Metadata._encodeSVG(_svg(_tokenId, concept, base64font));\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                INTERNAL\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _svg(\\n        uint256 _tokenId,\\n        ConceptStruct.Concept memory _concept,\\n        string memory base64font\\n    ) internal pure returns (string memory) {\\n        bool isBeef = _tokenId == 4 || _tokenId == 8 || _tokenId == 12 || _tokenId == 23 || _tokenId == 32 || _tokenId == 35 || _tokenId == 36 || _tokenId == 37;\\n        return\\n            SVG.element(\\n                \\\"svg\\\",\\n                SVG.svgAttributes(),\\n                string.concat(\\n                    '<defs><style>',\\n                    '@font-face {font-family: \\\"Norw\\\";src: url(\\\"',\\n                        base64font,\\n                    '\\\");}',\\n                    'text {text-transform: uppercase;'\\n                    '}</style></defs>'\\n                ),\\n                Background.render(isBeef),\\n                _renderText(_tokenId, _concept)\\n            );\\n    }\\n\\n    function _renderText(uint256 _tokenId, ConceptStruct.Concept memory _concept) internal pure returns (string memory) {\\n        // uint256 titleOffset = 155;\\n        // uint256 bodyOffset = 155 + 60;\\n        uint256 smallPrintOffset = 215 + _concept._bodyText.length * 30 + (_concept._bodyText.length > 0 ? 50 : 0);\\n        uint256 statusOffset = smallPrintOffset + _concept._smallPrintText.length * 20 + (_concept._smallPrintText.length > 0 ? 50 : 0);\\n        return SVG.element(\\n            \\\"g\\\",\\n            \\\"\\\",\\n            TextLine.render(_concept._title, 155, false),\\n            TextBody.render(_concept._bodyText, 215, false),\\n            TextBody.render(_concept._statusText, statusOffset, false),\\n            TextBody.render(_concept._smallPrintText, smallPrintOffset, true),\\n            TextEdition.render(bytes32(abi.encodePacked(Util.uint256ToString(_tokenId)))),\\n            TextOf.render(_editionTextConcat(_tokenId, _concept))\\n        );\\n    }\\n\\n    function _editionTextConcat(uint256 _tokenId, ConceptStruct.Concept memory _concept) internal pure returns (bytes32) {\\n        uint256 editionCount = _tokenId - _concept._editionTokenRangeStart + 1;\\n        return bytes32(abi.encodePacked(Util.uint256ToString(editionCount), \\\" of \\\", Util.uint256ToString(_concept._editionSize)));\\n    }\\n\\n    function _name(uint256 _tokenId) internal pure returns (string memory) {\\n        return string.concat(\\\"Beef \\\", Util.uint256ToString(_tokenId, 4));\\n    }\\n}\\n\",\"keccak256\":\"0x5bdbe033fe2ce820517cce0d11837475252c1fb5da2e270709553854aeacbf44\",\"license\":\"Unlicense\"},\"libraries/SVG.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {Util} from \\\"./Util.sol\\\";\\n\\nlibrary SVG {\\n    /*//////////////////////////////////////////////////////////////\\n                                 ELEMENT\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function element(string memory _type, string memory _attributes) internal pure returns (string memory) {\\n        return string.concat(\\\"<\\\", _type, \\\" \\\", _attributes, \\\"/>\\\");\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _children\\n    ) internal pure returns (string memory) {\\n        return string.concat(\\\"<\\\", _type, \\\" \\\", _attributes, \\\">\\\", _children, \\\"</\\\", _type, \\\">\\\");\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2\\n    ) internal pure returns (string memory) {\\n        return element(_type, _attributes, string.concat(_child1, _child2));\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2,\\n        string memory _child3\\n    ) internal pure returns (string memory) {\\n        return element(_type, _attributes, string.concat(_child1, _child2, _child3));\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2,\\n        string memory _child3,\\n        string memory _child4\\n    ) internal pure returns (string memory) {\\n        return element(_type, _attributes, string.concat(_child1, _child2, _child3, _child4));\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2,\\n        string memory _child3,\\n        string memory _child4,\\n        string memory _child5\\n    ) internal pure returns (string memory) {\\n        return element(_type, _attributes, string.concat(_child1, _child2, _child3, _child4, _child5));\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2,\\n        string memory _child3,\\n        string memory _child4,\\n        string memory _child5,\\n        string memory _child6\\n    ) internal pure returns (string memory) {\\n        return element(_type, _attributes, string.concat(_child1, _child2, _child3, _child4, _child5, _child6));\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2,\\n        string memory _child3,\\n        string memory _child4,\\n        string memory _child5,\\n        string memory _child6,\\n        string memory _child7\\n    ) internal pure returns (string memory) {\\n        return\\n            element(_type, _attributes, string.concat(_child1, _child2, _child3, _child4, _child5, _child6, _child7));\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2,\\n        string memory _child3,\\n        string memory _child4,\\n        string memory _child5,\\n        string memory _child6,\\n        string memory _child7,\\n        string memory _child8\\n    ) internal pure returns (string memory) {\\n        return\\n            element(_type, _attributes, string.concat(_child1, _child2, _child3, _child4, _child5, _child6, _child7, _child8));\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ATTRIBUTES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function svgAttributes() internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                'xmlns=\\\"http://www.w3.org/2000/svg\\\" '\\n                'xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" '\\n                'width=\\\"100%\\\" '\\n                'height=\\\"100%\\\" '\\n                'viewBox=\\\"0 0 511 619\\\" ',\\n                'preserveAspectRatio=\\\"xMidYMid meet\\\" ',\\n                'fill=\\\"none\\\" '\\n            );\\n    }\\n\\n    function textAttributes(\\n        string[2] memory _coords,\\n        string memory _fontSize,\\n        string memory _fontFamily,\\n        string memory _fill,\\n        string memory _attributes\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"x=\\\",\\n                Util.quote(_coords[0]),\\n                \\\"y=\\\",\\n                Util.quote(_coords[1]),\\n                \\\"font-size=\\\",\\n                Util.quote(string.concat(_fontSize, \\\"px\\\")),\\n                \\\"font-family=\\\",\\n                Util.quote(_fontFamily),\\n                \\\"fill=\\\",\\n                Util.quote(_fill),\\n                \\\" \\\",\\n                _attributes,\\n                \\\" \\\"\\n            );\\n    }\\n\\n    function rectAttributes(\\n        string memory _width,\\n        string memory _height,\\n        string memory _fill,\\n        string memory _attributes\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"width=\\\",\\n                Util.quote(_width),\\n                \\\"height=\\\",\\n                Util.quote(_height),\\n                \\\"fill=\\\",\\n                Util.quote(_fill),\\n                \\\" \\\",\\n                _attributes,\\n                \\\" \\\"\\n            );\\n    }\\n\\n    function filterAttribute(string memory _id) internal pure returns (string memory) {\\n        return string.concat(\\\"filter=\\\", '\\\"', \\\"url(#\\\", _id, \\\")\\\", '\\\" ');\\n    }\\n}\\n\",\"keccak256\":\"0x496588859506b626d63f19ffd43521b8bed7fe86651b586f25dc26cbcdab91a3\",\"license\":\"Unlicense\"},\"libraries/TextBody.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {Util} from \\\"./Util.sol\\\";\\nimport {SVG} from \\\"./SVG.sol\\\";\\n\\nlibrary TextBody {\\n    /*//////////////////////////////////////////////////////////////\\n                                 RENDER\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function render(bytes32[] memory _text, uint256 yOffset, bool _small) internal pure returns (string memory) {\\n        string memory textLines = \\\"\\\";\\n\\n        for (uint8 index = 0; index < _text.length; ++index) {\\n            textLines = string.concat(\\n                textLines,\\n                SVG.element(\\n                    \\\"text\\\",\\n                    SVG.textAttributes({\\n                        _fontSize: _small ? \\\"14\\\" : \\\"26\\\",\\n                        _fontFamily: \\\"Norw, 'Courier New', monospace\\\",\\n                        _coords: [\\n                            \\\"60\\\",\\n                            Util.uint256ToString(yOffset + index * (_small ? 20 : 30))\\n                        ],\\n                        _fill: \\\"white\\\",\\n                        _attributes: \\\"\\\"\\n                    }),\\n                    Util.bytes32ToString(_text[index])\\n                )\\n            );\\n        }\\n\\n        return\\n            textLines;\\n    }\\n}\\n\",\"keccak256\":\"0x5a51ad233067c5e9c6ca6d39f1231589e67f5bec8f7bce4b8f2ad5ae75e1757b\",\"license\":\"Unlicense\"},\"libraries/TextEdition.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {Util} from \\\"./Util.sol\\\";\\nimport {SVG} from \\\"./SVG.sol\\\";\\n\\nlibrary TextEdition {\\n    /*//////////////////////////////////////////////////////////////\\n                                 RENDER\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function render(bytes32 _text) internal pure returns (string memory) {\\n        return\\n            SVG.element(\\n                \\\"text\\\",\\n                SVG.textAttributes({\\n                    _fontSize: \\\"26\\\",\\n                    _fontFamily: \\\"Norw, 'Courier New', monospace\\\",\\n                    _coords: [\\\"12\\\", \\\"35\\\"],\\n                    _fill: \\\"white\\\",\\n                    _attributes: \\\"\\\"\\n                }),\\n                Util.bytes32ToString(_text)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xf2c40692fe6681ed6a9b55bf2ec66134101ebf4a7d9268e765b4bbcfad7e499c\",\"license\":\"Unlicense\"},\"libraries/TextLine.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {Util} from \\\"./Util.sol\\\";\\nimport {SVG} from \\\"./SVG.sol\\\";\\n\\nlibrary TextLine {\\n    /*//////////////////////////////////////////////////////////////\\n                                 RENDER\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function render(bytes32 _text, uint256 yOffset, bool _small) internal pure returns (string memory) {\\n        return\\n            SVG.element(\\n                \\\"text\\\",\\n                SVG.textAttributes({\\n                    _fontSize: _small ? \\\"14\\\" : \\\"26\\\",\\n                    _fontFamily: \\\"Norw, 'Courier New', monospace\\\",\\n                    _coords: [\\n                        \\\"60\\\",\\n                        Util.uint256ToString(yOffset)\\n                    ],\\n                    _fill: \\\"white\\\",\\n                    _attributes: \\\"\\\"\\n                }),\\n                Util.bytes32ToString(_text)\\n            )\\n        ;\\n    }\\n}\\n\",\"keccak256\":\"0x232c21dd96dcf51e0d207264dcc9eb26a6b1e6b26f67b26b07e7b5c4e199a846\",\"license\":\"Unlicense\"},\"libraries/TextOf.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {Util} from \\\"./Util.sol\\\";\\nimport {SVG} from \\\"./SVG.sol\\\";\\n\\nlibrary TextOf {\\n    /*//////////////////////////////////////////////////////////////\\n                                 RENDER\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function render(bytes32 _text) internal pure returns (string memory) {\\n        return\\n            SVG.element(\\n                \\\"text\\\",\\n                SVG.textAttributes({\\n                    _fontSize: \\\"26\\\",\\n                    _fontFamily: \\\"Norw, 'Courier New', monospace\\\",\\n                    _coords: [\\\"499\\\", \\\"605\\\"],\\n                    _fill: \\\"white\\\",\\n                    _attributes: 'text-anchor=\\\"end\\\"'\\n                }),\\n                Util.bytes32ToString(_text)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xa45037312125d0f3f994a3a7d5f836cbb34cab62de9b81338b34a1f9297c6cac\",\"license\":\"Unlicense\"},\"libraries/Traits.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {Util} from \\\"./Util.sol\\\";\\n\\nlibrary Traits {\\n    /*//////////////////////////////////////////////////////////////\\n                                 TRAITS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function attributes(bytes32[] memory _attributeLabels, bytes32[] memory _attributeValues) internal pure returns (string memory) {\\n        string memory result = \\\"[\\\";\\n        // result = string.concat(result, _attribute(\\\"Density\\\", densityTrait(_seed, _tokenId)));\\n        for (uint i; i < _attributeValues.length; i++) {\\n            result = string.concat(result, _attribute(string(abi.encodePacked(_attributeLabels[i])), string(abi.encodePacked(_attributeValues[i]))));\\n        }\\n        return string.concat(result, \\\"]\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                INTERNAL\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _attribute(string memory _traitType, string memory _value) internal pure returns (string memory) {\\n        return string.concat(\\\"{\\\", Util.keyValue(\\\"trait_type\\\", _traitType), \\\",\\\", Util.keyValue(\\\"value\\\", _value), \\\"}\\\");\\n    }\\n\\n    // function _rarity(bytes32 _seed, string memory _salt) internal pure returns (uint256) {\\n    //     return uint256(keccak256(abi.encodePacked(_seed, _salt))) % 100;\\n    // }\\n}\\n\",\"keccak256\":\"0xb579d308e31d1b23cc4f7f3e6f87a0fad43c1ff914443df3a986f6dcde636ce3\",\"license\":\"Unlicense\"},\"libraries/Util.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nlibrary Util {\\n    error NumberHasTooManyDigits();\\n\\n    /// @notice wraps a string in quotes and adds a space after\\n    function quote(string memory value) internal pure returns (string memory) {\\n        return string.concat('\\\"', value, '\\\" ');\\n    }\\n\\n    function keyValue(string memory _key, string memory _value) internal pure returns (string memory) {\\n        return string.concat('\\\"', _key, '\\\":\\\"', _value, '\\\"');\\n    }\\n\\n    function keyValueNoQuotes(string memory _key, string memory _value) internal pure returns (string memory) {\\n        return string.concat('\\\"', _key, '\\\":', _value);\\n    }\\n\\n    /// @notice converts a tokenId to string and pads to _digits digits\\n    /// @dev tokenId must be less than 10**_digits\\n    /// @param _tokenId, uint256, the tokenId\\n    /// @param _digits, uint8, the number of digits to pad to\\n    /// @return result the resulting string\\n    function uint256ToString(uint256 _tokenId, uint8 _digits) internal pure returns (string memory result) {\\n        uint256 max = 10**_digits;\\n        if (_tokenId >= max) revert NumberHasTooManyDigits();\\n        // add leading zeroes\\n        result = uint256ToString(_tokenId + max);\\n        assembly {\\n            // cut off one character\\n            result := add(result, 1)\\n            // store new length = _digits\\n            mstore(result, _digits)\\n        }\\n    }\\n\\n    /// @notice converts a uint256 to ascii representation, without leading zeroes\\n    /// @param _value, uint256, the value to convert\\n    /// @return result the resulting string\\n    function uint256ToString(uint256 _value) internal pure returns (string memory result) {\\n        if (_value == 0) return \\\"0\\\";\\n\\n        assembly {\\n            // largest uint = 2^256-1 has 78 digits\\n            // reserve 110 = 78 + 32 bytes of data in memory\\n            // (first 32 are for string length)\\n\\n            // get 110 bytes of free memory\\n            result := add(mload(0x40), 110)\\n            mstore(0x40, result)\\n\\n            // keep track of digits\\n            let digits := 0\\n\\n            for {\\n\\n            } gt(_value, 0) {\\n\\n            } {\\n                // increment digits\\n                digits := add(digits, 1)\\n                // go back one byte\\n                result := sub(result, 1)\\n                // compute ascii char\\n                let c := add(mod(_value, 10), 48)\\n                // store byte\\n                mstore8(result, c)\\n                // advance to next digit\\n                _value := div(_value, 10)\\n            }\\n            // go back 32 bytes\\n            result := sub(result, 32)\\n            // store the length\\n            mstore(result, digits)\\n        }\\n    }\\n\\n    function bytes1ToString(bytes1 _value) internal pure returns (string memory) {\\n        return uint256ToString(uint8(_value));\\n    }\\n\\n    function uint8ToString(uint8 _value) internal pure returns (string memory) {\\n        return uint256ToString(_value);\\n    }\\n\\n    /// @notice will revert in any characters are not in [0-9]\\n    function stringToUint256(string memory _value) internal pure returns (uint256 result) {\\n        // 0-9 are 48-57\\n\\n        bytes memory value = bytes(_value);\\n        if (value.length == 0) return 0;\\n        uint256 multiplier = 10**(value.length - 1);\\n        uint256 i;\\n        while (multiplier != 0) {\\n            result += uint256((uint8(value[i]) - 48)) * multiplier;\\n            unchecked {\\n                multiplier /= 10;\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function bytes1ToHex(bytes1 _value) internal pure returns (string memory) {\\n        bytes memory result = new bytes(2);\\n        uint8 x = uint8(_value);\\n\\n        result[0] = getHexChar(x >> 4);\\n        result[1] = getHexChar(x % 16);\\n\\n        return string(result);\\n    }\\n\\n    function bytes32ToBytes(bytes32 x) internal pure returns (bytes memory) {\\n        bytes memory bytesString = new bytes(32);\\n        for (uint i = 0; i < 32; i++) {\\n            if (x[i] == 0) {\\n                bytesString[i] = bytes1(0x20);\\n            } else {\\n                bytesString[i] = x[i];\\n            }\\n        }\\n        return abi.encodePacked(bytesString);\\n    }\\n\\n    function bytes32ToString(bytes32 x) internal pure returns (string memory) {\\n        return string(bytes32ToBytes(x));\\n    }\\n\\n    function getHexChar(uint8 _value) internal pure returns (bytes1) {\\n        if (_value < 10) {\\n            return bytes1(_value + 48);\\n        }\\n        _value -= 10;\\n        return bytes1(_value + 97);\\n    }\\n\\n    function stringToBytes1(string memory _value) internal pure returns (bytes1 result) {\\n        return bytes1(uint8(stringToUint256(_value)));\\n    }\\n\\n    function getRGBString(bytes memory _palette, uint256 _pos) internal pure returns (string memory result) {\\n        return\\n            string.concat(\\n                \\\"#\\\",\\n                Util.bytes1ToHex(_palette[3 * _pos]),\\n                Util.bytes1ToHex(_palette[3 * _pos + 1]),\\n                Util.bytes1ToHex(_palette[3 * _pos + 2])\\n            );\\n    }\\n\\n    function getRGBString(bytes3 _color) internal pure returns (string memory result) {\\n        return\\n            string.concat(\\n                \\\"#\\\",\\n                Util.bytes1ToHex(_color[0]),\\n                Util.bytes1ToHex(_color[1]),\\n                Util.bytes1ToHex(_color[2])\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xe932ff34f008fd466296ba38bacd84952c62b70b90d0d98d605d2212b5be6324\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061024f5760003560e01c8063944221d511610138578063d1db019a116100b0578063e8927fbc1161007f578063f2fde38b11610064578063f2fde38b14610671578063f4ed0f4614610691578063ff750ae3146106a757600080fd5b8063e8927fbc1461062e578063e985e9c51461063657600080fd5b8063d1db019a146105b5578063d732d955146105d5578063dc244a23146105dd578063dcb624bd146105f357600080fd5b8063a22cb46511610107578063b88d4fde116100ec578063b88d4fde14610562578063c87b56dd14610575578063d12a4c981461059557600080fd5b8063a22cb4651461052d578063a520e23c1461054d57600080fd5b8063944221d5146104b457806395d89b41146104e9578063a035b1fe146104fe578063a0712d681461051a57600080fd5b806347f57b32116101cb5780635ca2ddf11161019a57806370a082311161017f57806370a082311461047f578063715018a61461049f5780638da5cb5b1461039557600080fd5b80635ca2ddf11461043f5780636352211e1461045f57600080fd5b806347f57b32146103c05780634e67e779146103d55780634f4d61aa146103dd57806351cff8d91461041f57600080fd5b806318160ddd1161022257806323b872dd1161020757806323b872dd1461036f57806342842e0e1461038257806343bc16121461039557600080fd5b806318160ddd146103355780631a9ca8d21461035957600080fd5b806301ffc9a71461025457806306fdde0314610289578063081812fc146102ab578063095ea7b314610313575b600080fd5b34801561026057600080fd5b5061027461026f366004614bf4565b6106bc565b60405190151581526020015b60405180910390f35b34801561029557600080fd5b5061029e6107a1565b6040516102809190614c35565b3480156102b757600080fd5b506102ee6102c6366004614c86565b60036020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610280565b34801561031f57600080fd5b5061033361032e366004614cc1565b61082f565b005b34801561034157600080fd5b5061034b60075481565b604051908152602001610280565b34801561036557600080fd5b5061034b600f5481565b61033361037d366004614ced565b61097e565b610333610390366004614ced565b6109b4565b3480156103a157600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff166102ee565b3480156103cc57600080fd5b50610333610b44565b610333610bd6565b3480156103e957600080fd5b50600e54610402906bffffffffffffffffffffffff1681565b6040516bffffffffffffffffffffffff9091168152602001610280565b34801561042b57600080fd5b5061033361043a366004614d2e565b610cf5565b34801561044b57600080fd5b5061029e61045a366004614c86565b610d8a565b34801561046b57600080fd5b506102ee61047a366004614c86565b610e35565b34801561048b57600080fd5b5061034b61049a366004614d2e565b610f04565b3480156104ab57600080fd5b50610333610f5d565b3480156104c057600080fd5b50600e54610402906c0100000000000000000000000090046bffffffffffffffffffffffff1681565b3480156104f557600080fd5b5061029e610f6f565b34801561050a57600080fd5b5061034b67016345785d8a000081565b610333610528366004614c86565b610f7c565b34801561053957600080fd5b50610333610548366004614d4b565b610ffa565b34801561055957600080fd5b50610274611091565b610333610570366004614d89565b6110bd565b34801561058157600080fd5b5061029e610590366004614c86565b611242565b3480156105a157600080fd5b5061029e6105b0366004614c86565b611426565b3480156105c157600080fd5b506103336105d0366004614f5e565b6114ca565b6103336115f4565b3480156105e957600080fd5b5061034b600d5481565b3480156105ff57600080fd5b5061061361060e366004614d2e565b611653565b60408051938452602084019290925290820152606001610280565b610333611701565b34801561064257600080fd5b506102746106513660046150d0565b600460209081526000928352604080842090915290825290205460ff1681565b34801561067d57600080fd5b5061033361068c366004614d2e565b61171f565b34801561069d57600080fd5b5061034b60085481565b3480156106b357600080fd5b506103336117d6565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316148061074f57507f80ac58cd000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b8061079b57507f5b5e139f000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600180546107ae906150fe565b80601f01602080910402602001604051908101604052809291908181526020018280546107da906150fe565b80156108275780601f106107fc57610100808354040283529160200191610827565b820191906000526020600020905b81548152906001019060200180831161080a57829003601f168201915b505050505081565b60008181526005602052604090205473ffffffffffffffffffffffffffffffffffffffff1633811480610892575073ffffffffffffffffffffffffffffffffffffffff8116600090815260046020908152604080832033845290915290205460ff165b6108fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a454400000000000000000000000000000000000060448201526064015b60405180910390fd5b60008281526003602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff87811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6001810361099657610991838383611824565b505050565b602a81036109a957610991838383611824565b610991838383611a1e565b600181036109cc576109c7838383611824565b6109ea565b602a81036109df576109c7838383611824565b6109ea838383611a1e565b73ffffffffffffffffffffffffffffffffffffffff82163b1580610ade57506040517f150b7a020000000000000000000000000000000000000000000000000000000080825233600483015273ffffffffffffffffffffffffffffffffffffffff858116602484015260448301849052608060648401526000608484015290919084169063150b7a029060a4016020604051808303816000875af1158015610a96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aba9190615151565b7fffffffff0000000000000000000000000000000000000000000000000000000016145b610991576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f554e534146455f524543495049454e540000000000000000000000000000000060448201526064016108f4565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b6857600080fd5b600b60005260056020527f40f28f99a40bc9f6beea1013afdbc3cdcc689eb76b82c4de06c0acf1e1932ed554610bd49073ffffffffffffffffffffffffffffffffffffffff16610bcd60005473ffffffffffffffffffffffffffffffffffffffff1690565b600b611b11565b565b600760005260056020527feddb6698d7c569ff62ff64f1f1492bf14a54594835ba0faac91f84b4f5d814605473ffffffffffffffffffffffffffffffffffffffff16610c6357600d54341015610c58576040517f5dbd9b4100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610bd4336007611c60565b600d54341115610cc35734600d556007600081905260056020527feddb6698d7c569ff62ff64f1f1492bf14a54594835ba0faac91f84b4f5d8146054610bd49173ffffffffffffffffffffffffffffffffffffffff909116903390611824565b6040517f5dbd9b4100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005473ffffffffffffffffffffffffffffffffffffffff163314610d1957600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff164760405160006040518083038185875af1925050503d8060008114610d73576040519150601f19603f3d011682016040523d82523d6000602084013e610d78565b606091505b5050905080610d8657600080fd5b5050565b60606000610d9783611e14565b9050610e2e838260108054610dab906150fe565b80601f0160208091040260200160405190810160405280929190818152602001828054610dd7906150fe565b8015610e245780601f10610df957610100808354040283529160200191610e24565b820191906000526020600020905b815481529060010190602001808311610e0757829003601f168201915b5050505050612305565b9392505050565b6000602a8203610e46575041919050565b601682148015610e5e5750610e5c60024361519d565b155b80610e7e5750601f82148015610e7e5750610e7a60024361519d565b6001145b15610eb5576040517f184e367900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60038203610efb57610ec5611091565b610efb576040517fe188e19f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61079b82612322565b60004173ffffffffffffffffffffffffffffffffffffffff831603610f545773ffffffffffffffffffffffffffffffffffffffff821660009081526006602052604090205461079b9060016151e0565b61079b826123ae565b610f65612456565b610bd460006124d7565b600280546107ae906150fe565b600081118015610f8e57506008548111155b610f9757600080fd5b600060288214610faf5767016345785d8a0000610fc9565b610fc967016345785d8a0000670de0b6b3a76400006151e0565b9050803414610fd757600080fd5b610fe13383611c60565b60078054906000610ff1836151f3565b91905055505050565b33600081815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6000806110a1620151804261519d565b9050617e9081101580156110b7575061ef108111155b91505090565b600183036110d5576110d0858585611824565b6110f3565b602a83036110e8576110d0858585611824565b6110f3858585611a1e565b73ffffffffffffffffffffffffffffffffffffffff84163b15806111d557506040517f150b7a02000000000000000000000000000000000000000000000000000000008082529073ffffffffffffffffffffffffffffffffffffffff86169063150b7a029061116e9033908a9089908990899060040161522b565b6020604051808303816000875af115801561118d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b19190615151565b7fffffffff0000000000000000000000000000000000000000000000000000000016145b61123b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f554e534146455f524543495049454e540000000000000000000000000000000060448201526064016108f4565b5050505050565b606060168214801561125c575061125a60024361519d565b155b8061127c5750601f8214801561127c575061127860024361519d565b6001145b156112b3576040517f184e367900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600382036112f9576112c3611091565b6112f9576040517fe188e19f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008281526005602052604090205473ffffffffffffffffffffffffffffffffffffffff16611384576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e4f545f4d494e5445440000000000000000000000000000000000000000000060448201526064016108f4565b600061138f83611e14565b9050610e2e8382601080546113a3906150fe565b80601f01602080910402602001604051908101604052809291908181526020018280546113cf906150fe565b801561141c5780601f106113f15761010080835404028352916020019161141c565b820191906000526020600020905b8154815290600101906020018083116113ff57829003601f168201915b505050505061254c565b6060600061143383611e14565b9050610e2e838260108054611447906150fe565b80601f0160208091040260200160405190810160405280929190818152602001828054611473906150fe565b80156114c05780601f10611495576101008083540402835291602001916114c0565b820191906000526020600020905b8154815290600101906020018083116114a357829003601f168201915b5050505050612606565b60005473ffffffffffffffffffffffffffffffffffffffff1633146114ee57600080fd5b60005b8151811015610d8657600082828151811061150e5761150e6152aa565b602090810291909101810151805160008181526009845260409081902083518155838501516001820155908301516002820155606083015180519395509193859391926115649260038501929190910190614b66565b5060808201518051611580916004840191602090910190614b66565b5060a0820151805161159c916005840191602090910190614b66565b5050825190505b602083015183516115b491906151e0565b8110156115de576000818152600a60205260409020829055806115d6816151f3565b9150506115a3565b50505080806115ec906151f3565b9150506114f1565b600e80546c0100000000000000000000000090046bffffffffffffffffffffffff1690600c611622836152d9565b91906101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555050565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606083901b166020820152600090819081908190603401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805160209091012090506116d3620186a08261519d565b93506116e6620186a0600883901c61519d565b92506116f8612710601083901c61519d565b93959294505050565b600e80546bffffffffffffffffffffffff169060006116228361531f565b611727612456565b73ffffffffffffffffffffffffffffffffffffffff81166117ca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016108f4565b6117d3816124d7565b50565b602a600081905260056020527fd3e7a847b0e4be9f2ff1f88564b0a771bb9789c2c82f98679296a6042483791d54610bd49173ffffffffffffffffffffffffffffffffffffffff9091169041905b73ffffffffffffffffffffffffffffffffffffffff82166118a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e56414c49445f524543495049454e5400000000000000000000000000000060448201526064016108f4565b60008181526005602052604090205473ffffffffffffffffffffffffffffffffffffffff848116911614611931576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f57524f4e475f46524f4d0000000000000000000000000000000000000000000060448201526064016108f4565b600061193e848484612613565b90508061194b5750505050565b73ffffffffffffffffffffffffffffffffffffffff808516600081815260066020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019055938716808352848320805460010190558683526005825284832080547fffffffffffffffffffffffff00000000000000000000000000000000000000009081168317909155600390925284832080549092169091559251859392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a450505050565b3373ffffffffffffffffffffffffffffffffffffffff84161480611a72575073ffffffffffffffffffffffffffffffffffffffff8316600090815260046020908152604080832033845290915290205460ff165b80611aa0575060008181526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1633145b611b06576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a454400000000000000000000000000000000000060448201526064016108f4565b610991838383611824565b73ffffffffffffffffffffffffffffffffffffffff8216611b8e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e56414c49445f524543495049454e5400000000000000000000000000000060448201526064016108f4565b73ffffffffffffffffffffffffffffffffffffffff808416600081815260066020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019055938616808352848320805460010190558583526005825284832080547fffffffffffffffffffffffff00000000000000000000000000000000000000009081168317909155600390925284832080549092169091559251849392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b73ffffffffffffffffffffffffffffffffffffffff8216611cdd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e56414c49445f524543495049454e5400000000000000000000000000000060448201526064016108f4565b60008181526005602052604090205473ffffffffffffffffffffffffffffffffffffffff1615611d69576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f414c52454144595f4d494e54454400000000000000000000000000000000000060448201526064016108f4565b6000611d7760008484612613565b905080611d8357505050565b73ffffffffffffffffffffffffffffffffffffffff8316600081815260066020908152604080832080546001019055858352600590915280822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000168417905551849291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b611e506040518060c001604052806000815260200160008152602001600080191681526020016060815260200160608152602001606081525090565b6000828152600a602090815260408083205480845260098352818420825160c0810184528154815260018201548186015260028201548185015260038201805485518188028101880190965280865293969591949293606086019392830182828015611edb57602002820191906000526020600020905b815481526020019060010190808311611ec7575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015611f3357602002820191906000526020600020905b815481526020019060010190808311611f1f575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015611f8b57602002820191906000526020600020905b815481526020019060010190808311611f77575b5050505050815250509050600784036120ab5760408051600180825281830190925260009160208083019080368337019050509050611fde670de0b6b3a7640000600d54611fd9919061534a565b613717565b612003600a67016345785d8a0000600d54611ff9919061534a565b611fd9919061519d565b600a662386f26fc10000600d5461201a919061534a565b612024919061519d565b1561204857612043600a662386f26fc10000600d54611ff9919061534a565b612059565b604051806020016040528060008152505b60405160200161206b9392919061537a565b6040516020818303038152906040526120839061543c565b81600081518110612096576120966152aa565b602090810291909101015260a0820152610e2e565b601184036120f057604080516001808252818301909252600091602080830190803683370190505090506120e0600f54613717565b60405160200161206b919061547e565b601b840361214457600e54612112906bffffffffffffffffffffffff16613717565b60405160200161212291906154c3565b60405160208183030381529060405261213a9061543c565b6040820152610e2e565b6013840361217657600e54612112906c0100000000000000000000000090046bffffffffffffffffffffffff16613717565b6003840361222e57604080516001808252818301909252600091602080830190803683370190505090506121a8611091565b6121e7576040518060400160405280600681526020017f436c6f736564000000000000000000000000000000000000000000000000000081525061221e565b6040518060400160405280600481526020017f4f70656e000000000000000000000000000000000000000000000000000000008152505b60405160200161206b91906154df565b60158403610e2e576040805160038082526080820190925260009160208201606080368337505050600086815260056020526040812054919250908190819061228c9073ffffffffffffffffffffffffffffffffffffffff16611653565b9194509250905061229c83613717565b6122a583613717565b6122ae83613717565b6040516020016122c093929190615524565b6040516020818303038152906040526122d89061543c565b846000815181106122eb576122eb6152aa565b602090810291909101015250505060a08201529392505050565b606061231a6123158585856137d9565b6138a9565b949350505050565b60008181526005602052604081205473ffffffffffffffffffffffffffffffffffffffff168061079b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e4f545f4d494e5445440000000000000000000000000000000000000000000060448201526064016108f4565b600073ffffffffffffffffffffffffffffffffffffffff821661242d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f41444452455353000000000000000000000000000000000000000060448201526064016108f4565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526006602052604090205490565b60005473ffffffffffffffffffffffffffffffffffffffff163314610bd4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108f4565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60608060005b8460600151518110156125bb578161258686606001518381518110612579576125796152aa565b6020026020010151613911565b60405160200161259792919061559a565b604051602081830303815290604052915080806125b3906151f3565b915050612552565b506125fd856125cd8660400151613a5f565b836040516020016125de91906154c3565b6040516020818303038152906040526125f88989896137d9565b613a6a565b95945050505050565b606061231a8484846137d9565b600060098203612653576000805b62026db881101561264c5781612636816151f3565b9250508080612644906151f3565b915050612621565b505061370d565b60168214801561266b575061266960024361519d565b155b8061268b5750601f8214801561268b575061268760024361519d565b6001145b156126c2576040517f184e367900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602a82036126f15773ffffffffffffffffffffffffffffffffffffffff831641146126ec57600080fd5b61370d565b6003820361273757612701611091565b6126ec576040517fe188e19f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60048214806127465750601782145b806127515750602582145b8061275c5750602082145b806127675750600c82145b806127725750602482145b8061277d5750602382145b806127885750600882145b806127935750602982145b8061279e5750601282145b806127a95750601c82145b15612bab57606083901b60048314801561280457507fdead00000000000000000000000000000000beef0000000000000000000000007fffff00000000000000000000000000000000ffff0000000000000000000000008216145b8061285b575060178314801561285b57507fbeef00000000000000000000000000000000beef0000000000000000000000007fffff00000000000000000000000000000000ffff0000000000000000000000008216145b806128b257506025831480156128b257507ffeed00000000000000000000000000000000beef0000000000000000000000007fffff00000000000000000000000000000000ffff0000000000000000000000008216145b80612909575060208314801561290957507fdeaf00000000000000000000000000000000beef0000000000000000000000007fffff00000000000000000000000000000000ffff0000000000000000000000008216145b806129605750600c8314801561296057507fbad000000000000000000000000000000000beef0000000000000000000000007ffff000000000000000000000000000000000ffff0000000000000000000000008216145b806129b757506024831480156129b757507fbeef00000000000000000000000000000000face0000000000000000000000007fffff00000000000000000000000000000000ffff0000000000000000000000008216145b80612a0e5750602383148015612a0e57507fbabe00000000000000000000000000000000beef0000000000000000000000007fffff00000000000000000000000000000000ffff0000000000000000000000008216145b80612a655750600883148015612a6557507fbeef00000000000000000000000000000000babe0000000000000000000000007fffff00000000000000000000000000000000ffff0000000000000000000000008216145b80612abc5750602983148015612abc57507fbad000000000000000000000000000000000babe0000000000000000000000007ffff000000000000000000000000000000000ffff0000000000000000000000008216145b80612b135750601283148015612b1357507fdeaf00000000000000000000000000000000babe0000000000000000000000007fffff00000000000000000000000000000000ffff0000000000000000000000008216145b80612b6a5750601c83148015612b6a57507fdead00000000000000000000000000000000babe0000000000000000000000007fffff00000000000000000000000000000000ffff0000000000000000000000008216145b1515600003612ba5576040517f1a9e492700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5061370d565b600e8210158015612bbd575060108211155b15612dd3576000600e8314612bd357600e612bd6565b600f5b90506000600e8414612bf857600f8414612bf157600f612bfb565b6010612bfb565b60105b6000838152600b602052604090205490915043148015612c2857506000818152600b602052604090205443145b15612d725760008281526005602052604090205473ffffffffffffffffffffffffffffffffffffffff1615612c9b57600082815260056020908152604080832054600c90925290912054612c969173ffffffffffffffffffffffffffffffffffffffff908116911684611b11565b612cca565b6000828152600c6020526040902054612cca9073ffffffffffffffffffffffffffffffffffffffff1683613bac565b60008181526005602052604090205473ffffffffffffffffffffffffffffffffffffffff1615612d3857600081815260056020908152604080832054600c90925290912054612d339173ffffffffffffffffffffffffffffffffffffffff908116911683611b11565b612d67565b6000818152600c6020526040902054612d679073ffffffffffffffffffffffffffffffffffffffff1682613bac565b600192505050610e2e565b5050506000818152600b60209081526040808320439055600c909152812080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8516179055610e2e565b6018821480612de25750601982145b15612ef957600060188314612df8576018612dfb565b60195b9050611000612e0a81866155c9565b600083815260056020526040902054612e3c906110009073ffffffffffffffffffffffffffffffffffffffff166155c9565b612e4691906155fc565b73ffffffffffffffffffffffffffffffffffffffff16108015612ebe5750611000612e7981610fff609488901c166155c9565b600083815260056020526040902054612e9c906110009060941c610fff166155c9565b612ea691906155fc565b73ffffffffffffffffffffffffffffffffffffffff16105b1515600003612ba5576040517f70dd2b4600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6005821480612f085750600682145b1561306557600060058314612f1e576005612f21565b60065b6000818152600560205260408120549192507fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606092831b169186901b905b602881101561305c576010612f76826004615630565b612fa891907fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008516901c60601c6155c9565b73ffffffffffffffffffffffffffffffffffffffff166010612fcb836004615630565b612ffd91907fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008716901c60601c6155c9565b73ffffffffffffffffffffffffffffffffffffffff160361304a576040517fa90de52900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80613054816151f3565b915050612f60565b5050505061370d565b601a82036131a157606083901b6000805b602881101561316e57601061308c826004615630565b6130be91907fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008616901c60601c6155c9565b73ffffffffffffffffffffffffffffffffffffffff161561316e5760106130e6826004615630565b61311891907fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008616901c60601c6155c9565b73ffffffffffffffffffffffffffffffffffffffff16600f03613143578161313f81615647565b9250505b600d8261ffff16111561315c5760019350505050610e2e565b80613166816151f3565b915050613076565b506040517f74279ff700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a82036132e057606083901b6000805b60288110156132ad5760106131c8826004615630565b6131fa91907fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008616901c60601c6155c9565b73ffffffffffffffffffffffffffffffffffffffff16600f03156132ad576010613225826004615630565b61325791907fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008616901c60601c6155c9565b73ffffffffffffffffffffffffffffffffffffffff16600003613282578161327e81615647565b9250505b600d8261ffff16111561329b5760019350505050610e2e565b806132a5816151f3565b9150506131b2565b506040517fc274dea700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602782036133b157606083901b6000805b602881101561337e576010613307826004615630565b61333991907fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008616901c60601c6155c9565b73ffffffffffffffffffffffffffffffffffffffff166001901b821791508161ffff0361336c5760019350505050610e2e565b80613376816151f3565b9150506132f1565b506040517f76ea107a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600282036133f657823b6000819003612ba5576040517f6f7c43f100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600d820361341757823b801561340b57600080fd5b323314612ba557600080fd5b6011820361349d57600f541561344157600f80549060006134378361565e565b919050555061370d565b6011600081905260056020527fb4e18992ad424cdedc46668609f2bafcf665a8d99577618d5923c69264d9cf5f546134959173ffffffffffffffffffffffffffffffffffffffff9091169061dead90611b11565b506000610e2e565b6028820361353c57670de0b6b3a764000034101580156134d657506134d267016345785d8a0000670de0b6b3a76400006151e0565b3411155b6134df57600080fd5b6040516000908190670de0b6b3a7640000908281818185825af1925050503d8060008114613529576040519150601f19603f3d011682016040523d82523d6000602084013e61352e565b606091505b5050905080612ba557600080fd5b602282036135935773ffffffffffffffffffffffffffffffffffffffff831641146126ec576040517fc384d6a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601d820361370d57601d600090815260056020527f348e8fe0716b12afdd2e814ae0b8b1bb9b5c7a197ef418c73b8bdd93bee14de5547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606091821b16919085901b905b600381101561370957601061360d826003615693565b613618906028615693565b613623906004615630565b61365591907fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008516901c60601c6155c9565b73ffffffffffffffffffffffffffffffffffffffff166010613678836004615630565b6136aa91907fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008716901c60601c6155c9565b73ffffffffffffffffffffffffffffffffffffffff16146136f7576040517f4de772ca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80613701816151f3565b9150506135f7565b5050505b5060019392505050565b60608160000361375a57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b606e6040510190508060405260005b82156137ad577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90910190600101600a830660300180835350600a83049250613769565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909101908152919050565b6060600084600414806137ec5750846008145b806137f7575084600c145b806138025750846017145b8061380d5750846020145b806138185750846023145b806138235750846024145b8061382e5750846025145b90506125fd6040518060400160405280600381526020017f7376670000000000000000000000000000000000000000000000000000000000815250613871613d45565b8560405160200161388291906156a6565b60405160208183030381529060405261389a85613e72565b6138a48a8a613fad565b614111565b60606040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152506138ea83614141565b6040516020016138fb92919061559a565b6040516020818303038152906040529050919050565b6040805160208082528183019092526060916000919060208201818036833701905050905060005b6020811015613a3657838160208110613954576139546152aa565b1a60f81b7fff00000000000000000000000000000000000000000000000000000000000000166000036139cc57602060f81b828281518110613998576139986152aa565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350613a24565b8381602081106139de576139de6152aa565b1a60f81b8282815181106139f4576139f46152aa565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b80613a2e816151f3565b915050613939565b5080604051602001613a4891906154c3565b604051602081830303815290604052915050919050565b606061079b82613911565b60606000613ab56040518060400160405280600781526020017f746f6b656e496400000000000000000000000000000000000000000000000000815250613ab088613717565b61431b565b613af46040518060400160405280600481526020017f6e616d65000000000000000000000000000000000000000000000000000000008152508761431b565b613b336040518060400160405280600b81526020017f6465736372697074696f6e0000000000000000000000000000000000000000008152508761431b565b613b756040518060400160405280600581526020017f696d616765000000000000000000000000000000000000000000000000000000815250613ab0886138a9565b604051602001613b8894939291906157aa565b6040516020818303038152906040529050613ba281614347565b9695505050505050565b73ffffffffffffffffffffffffffffffffffffffff8216613c29576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e56414c49445f524543495049454e5400000000000000000000000000000060448201526064016108f4565b60008181526005602052604090205473ffffffffffffffffffffffffffffffffffffffff1615613cb5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f414c52454144595f4d494e54454400000000000000000000000000000000000060448201526064016108f4565b73ffffffffffffffffffffffffffffffffffffffff8216600081815260066020908152604080832080546001019055848352600590915280822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6060604051602001613e5e907f786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737681527f672220786d6c6e733a786c696e6b3d22687474703a2f2f7777772e77332e6f7260208201527f672f313939392f786c696e6b222077696474683d22313030252220686569676860408201527f743d2231303025222076696577426f783d22302030203531312036313922200060608201527f7072657365727665417370656374526174696f3d22784d6964594d6964206d65607f8201527f6574222000000000000000000000000000000000000000000000000000000000609f8201527f66696c6c3d226e6f6e652220000000000000000000000000000000000000000060a382015260af0190565b604051602081830303815290604052905090565b606061079b6040518060400160405280600481526020017f7265637400000000000000000000000000000000000000000000000000000000815250613fa86040518060400160405280600481526020017f31303025000000000000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f313030250000000000000000000000000000000000000000000000000000000081525086613f5c576040518060400160405280600481526020017f2330303000000000000000000000000000000000000000000000000000000000815250613f93565b6040518060400160405280600781526020017f23424132323139000000000000000000000000000000000000000000000000008152505b60405180602001604052806000815250614388565b6143d2565b606060008083606001515111613fc4576000613fc7565b60325b60ff16836060015151601e613fdc9190615630565b613fe79060d76151e0565b613ff191906151e0565b90506000808460800151511161400857600061400b565b60325b60ff1684608001515160146140209190615630565b61402a90846151e0565b61403491906151e0565b90506125fd6040518060400160405280600181526020017f6700000000000000000000000000000000000000000000000000000000000000815250604051806020016040528060008152506140908760400151609b60006143e7565b6140a1886060015160d7600061457c565b6140b18960a0015187600061457c565b6140c18a6080015189600161457c565b6140fa6140cd8d613717565b6040516020016140dd91906154c3565b6040516020818303038152906040526140f59061543c565b6146ec565b61410c6141078e8e614869565b6148c6565b614a60565b6060613ba2868686868660405160200161412d93929190615891565b604051602081830303815290604052614a8f565b6060815160000361416057505060408051602081019091526000815290565b6000604051806060016040528060408152602001615f69604091399050600060038451600261418f91906151e0565b614199919061534a565b6141a4906004615630565b905060006141b38260206151e0565b67ffffffffffffffff8111156141cb576141cb614e28565b6040519080825280601f01601f1916602001820160405280156141f5576020820181803683370190505b509050818152600183018586518101602084015b818310156142635760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b93820193909352600401614209565b60038951066001811461427d57600281146142c75761430d565b7f3d3d0000000000000000000000000000000000000000000000000000000000007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe83015261430d565b7f3d000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8301525b509398975050505050505050565b606082826040516020016143309291906158d4565b604051602081830303815290604052905092915050565b60606040518060400160405280601d81526020017f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152506138ea83614ac0565b606061439385614acb565b61439c85614acb565b6143a585614acb565b846040516020016143b9949392919061595e565b6040516020818303038152906040529050949350505050565b60608282604051602001614330929190615a66565b606061231a6040518060400160405280600481526020017f746578740000000000000000000000000000000000000000000000000000000081525061456e60405180604001604052806040518060400160405280600281526020017f3630000000000000000000000000000000000000000000000000000000000000815250815260200161447488613717565b9052856144b6576040518060400160405280600281526020017f32360000000000000000000000000000000000000000000000000000000000008152506144ed565b6040518060400160405280600281526020017f31340000000000000000000000000000000000000000000000000000000000008152505b6040518060400160405280601e81526020017f4e6f72772c2027436f7572696572204e6577272c206d6f6e6f737061636500008152506040518060400160405280600581526020017f776869746500000000000000000000000000000000000000000000000000000081525060405180602001604052806000815250614ade565b61457787613a5f565b614a8f565b60408051602081019091526000808252606091905b85518160ff1610156146e357816146b06040518060400160405280600481526020017f746578740000000000000000000000000000000000000000000000000000000081525061468b60405180604001604052806040518060400160405280600281526020017f363000000000000000000000000000000000000000000000000000000000000081525081526020016146498a61462f57601e614632565b60145b61463c9089615b11565b611fd99060ff168d6151e0565b9052886144b6576040518060400160405280600281526020017f32360000000000000000000000000000000000000000000000000000000000008152506144ed565b6145778a8660ff16815181106146a3576146a36152aa565b6020026020010151613a5f565b6040516020016146c192919061559a565b6040516020818303038152906040529150806146dc90615b2d565b9050614591565b50949350505050565b606061079b6040518060400160405280600481526020017f746578740000000000000000000000000000000000000000000000000000000081525061486060405180604001604052806040518060400160405280600281526020017f313200000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600281526020017f33350000000000000000000000000000000000000000000000000000000000008152508152506040518060400160405280600281526020017f32360000000000000000000000000000000000000000000000000000000000008152506040518060400160405280601e81526020017f4e6f72772c2027436f7572696572204e6577272c206d6f6e6f737061636500008152506040518060400160405280600581526020017f776869746500000000000000000000000000000000000000000000000000000081525060405180602001604052806000815250614ade565b61457785613a5f565b8051600090819061487a9085615693565b6148859060016151e0565b905061489081613717565b61489d8460200151613717565b6040516020016148ae929190615b4c565b60405160208183030381529060405261231a9061543c565b606061079b6040518060400160405280600481526020017f746578740000000000000000000000000000000000000000000000000000000081525061486060405180604001604052806040518060400160405280600381526020017f343939000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f36303500000000000000000000000000000000000000000000000000000000008152508152506040518060400160405280600281526020017f32360000000000000000000000000000000000000000000000000000000000008152506040518060400160405280601e81526020017f4e6f72772c2027436f7572696572204e6577272c206d6f6e6f737061636500008152506040518060400160405280600581526020017f77686974650000000000000000000000000000000000000000000000000000008152506040518060400160405280601181526020017f746578742d616e63686f723d22656e6422000000000000000000000000000000815250614ade565b6060614a82898989898989898960405160200161412d96959493929190615ba4565b9998505050505050505050565b606083838386604051602001614aa89493929190615c23565b60405160208183030381529060405290509392505050565b606061079b82614141565b6060816040516020016138fb9190615d2b565b6060614af18660005b6020020151614acb565b614afc876001614ae7565b614b2487604051602001614b109190615d97565b604051602081830303815290604052614acb565b614b2d87614acb565b614b3687614acb565b86604051602001614b4c96959493929190615dd8565b604051602081830303815290604052905095945050505050565b828054828255906000526020600020908101928215614ba1579160200282015b82811115614ba1578251825591602001919060010190614b86565b50614bad929150614bb1565b5090565b5b80821115614bad5760008155600101614bb2565b7fffffffff00000000000000000000000000000000000000000000000000000000811681146117d357600080fd5b600060208284031215614c0657600080fd5b8135610e2e81614bc6565b60005b83811015614c2c578181015183820152602001614c14565b50506000910152565b6020815260008251806020840152614c54816040850160208701614c11565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600060208284031215614c9857600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff811681146117d357600080fd5b60008060408385031215614cd457600080fd5b8235614cdf81614c9f565b946020939093013593505050565b600080600060608486031215614d0257600080fd5b8335614d0d81614c9f565b92506020840135614d1d81614c9f565b929592945050506040919091013590565b600060208284031215614d4057600080fd5b8135610e2e81614c9f565b60008060408385031215614d5e57600080fd5b8235614d6981614c9f565b915060208301358015158114614d7e57600080fd5b809150509250929050565b600080600080600060808688031215614da157600080fd5b8535614dac81614c9f565b94506020860135614dbc81614c9f565b935060408601359250606086013567ffffffffffffffff80821115614de057600080fd5b818801915088601f830112614df457600080fd5b813581811115614e0357600080fd5b896020828501011115614e1557600080fd5b9699959850939650602001949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715614e7a57614e7a614e28565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715614ec757614ec7614e28565b604052919050565b600067ffffffffffffffff821115614ee957614ee9614e28565b5060051b60200190565b600082601f830112614f0457600080fd5b81356020614f19614f1483614ecf565b614e80565b82815260059290921b84018101918181019086841115614f3857600080fd5b8286015b84811015614f535780358352918301918301614f3c565b509695505050505050565b60006020808385031215614f7157600080fd5b823567ffffffffffffffff80821115614f8957600080fd5b818501915085601f830112614f9d57600080fd5b8135614fab614f1482614ecf565b81815260059190911b83018401908481019088831115614fca57600080fd5b8585015b838110156150c357803585811115614fe557600080fd5b860160c0818c037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001121561501a5760008081fd5b615022614e57565b8882013581526040808301358a830152606080840135828401526080915081840135898111156150525760008081fd5b6150608f8d83880101614ef3565b82850152505060a0808401358981111561507a5760008081fd5b6150888f8d83880101614ef3565b838501525060c08401359150888211156150a25760008081fd5b6150b08e8c84870101614ef3565b9083015250845250918601918601614fce565b5098975050505050505050565b600080604083850312156150e357600080fd5b82356150ee81614c9f565b91506020830135614d7e81614c9f565b600181811c9082168061511257607f821691505b60208210810361514b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60006020828403121561516357600080fd5b8151610e2e81614bc6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826151ac576151ac61516e565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561079b5761079b6151b1565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203615224576152246151b1565b5060010190565b600073ffffffffffffffffffffffffffffffffffffffff808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011683010190509695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006bffffffffffffffffffffffff8216806152f7576152f76151b1565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b60006bffffffffffffffffffffffff808316818103615340576153406151b1565b6001019392505050565b6000826153595761535961516e565b500490565b60008151615370818560208601614c11565b9290920192915050565b7f50726963653a20000000000000000000000000000000000000000000000000008152600084516153b2816007850160208901614c11565b7f2e0000000000000000000000000000000000000000000000000000000000000060079184019182015284516153ef816008840160208901614c11565b8451910190615405816008840160208801614c11565b7f204554480000000000000000000000000000000000000000000000000000000060089290910191820152600c0195945050505050565b8051602080830151919081101561514b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60209190910360031b1b16919050565b7f5472616e7366657273204c6566743a20000000000000000000000000000000008152600082516154b6816010850160208701614c11565b9190910160100192915050565b600082516154d5818460208701614c11565b9190910192915050565b7f43757272656e746c79200000000000000000000000000000000000000000000081526000825161551781600a850160208701614c11565b91909101600a0192915050565b60008451615536818460208901614c11565b80830190507f2c200000000000000000000000000000000000000000000000000000000000008082528551615572816002850160208a01614c11565b6002920191820152835161558d816004840160208801614c11565b0160040195945050505050565b600083516155ac818460208801614c11565b8351908301906155c0818360208801614c11565b01949350505050565b600073ffffffffffffffffffffffffffffffffffffffff808416806155f0576155f061516e565b92169190910692915050565b73ffffffffffffffffffffffffffffffffffffffff818116838216019080821115615629576156296151b1565b5092915050565b808202811582820484141761079b5761079b6151b1565b600061ffff808316818103615340576153406151b1565b60008161566d5761566d6151b1565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b8181038181111561079b5761079b6151b1565b7f3c646566733e3c7374796c653e0000000000000000000000000000000000000081527f40666f6e742d66616365207b666f6e742d66616d696c793a20224e6f7277223b600d8201527f7372633a2075726c282200000000000000000000000000000000000000000000602d8201526000825161572a816037850160208701614c11565b7f22293b7d0000000000000000000000000000000000000000000000000000000060379390910192830152507f74657874207b746578742d7472616e73666f726d3a207570706572636173653b603b8201527f7d3c2f7374796c653e3c2f646566733e00000000000000000000000000000000605b820152606b01919050565b7f7b000000000000000000000000000000000000000000000000000000000000008152600085516157e2816001850160208a01614c11565b80830190507f2c000000000000000000000000000000000000000000000000000000000000008060018301528651615821816002850160208b01614c11565b60029201918201819052855161583e816003850160208a01614c11565b60039201918201528351615859816004840160208801614c11565b7f7d00000000000000000000000000000000000000000000000000000000000000600492909101918201526005019695505050505050565b600084516158a3818460208901614c11565b8451908301906158b7818360208901614c11565b84519101906158ca818360208801614c11565b0195945050505050565b60007f2200000000000000000000000000000000000000000000000000000000000000808352845161590d816001860160208901614c11565b7f223a220000000000000000000000000000000000000000000000000000000000600191850191820152845161594a816004840160208901614c11565b016004810191909152600501949350505050565b7f77696474683d0000000000000000000000000000000000000000000000000000815260008551615996816006850160208a01614c11565b7f6865696768743d0000000000000000000000000000000000000000000000000060069184019182015285516159d381600d840160208a01614c11565b7f66696c6c3d000000000000000000000000000000000000000000000000000000600d92909101918201528451615a11816012840160208901614c11565b8082019150507f20000000000000000000000000000000000000000000000000000000000000008060128301528451615a51816013850160208901614c11565b60139201918201526014019695505050505050565b7f3c00000000000000000000000000000000000000000000000000000000000000815260008351615a9e816001850160208801614c11565b7f20000000000000000000000000000000000000000000000000000000000000006001918401918201528351615adb816002840160208801614c11565b7f2f3e00000000000000000000000000000000000000000000000000000000000060029290910191820152600401949350505050565b60ff8181168382160290811690818114615629576156296151b1565b600060ff821660ff8103615b4357615b436151b1565b60010192915050565b60008351615b5e818460208801614c11565b7f206f6620000000000000000000000000000000000000000000000000000000009083019081528351615b98816004840160208801614c11565b01600401949350505050565b600087516020615bb78285838d01614c11565b885191840191615bca8184848d01614c11565b8851920191615bdc8184848c01614c11565b8751920191615bee8184848b01614c11565b8651920191615c008184848a01614c11565b8551920191615c128184848901614c11565b919091019998505050505050505050565b7f3c00000000000000000000000000000000000000000000000000000000000000815260008551615c5b816001850160208a01614c11565b7f20000000000000000000000000000000000000000000000000000000000000006001918401918201528551615c98816002840160208a01614c11565b8082019150507f3e000000000000000000000000000000000000000000000000000000000000008060028301528551615cd8816003850160208a01614c11565b7f3c2f000000000000000000000000000000000000000000000000000000000000600393909101928301528451615d16816005850160208901614c11565b60059201918201526006019695505050505050565b7f2200000000000000000000000000000000000000000000000000000000000000815260008251615d63816001850160208701614c11565b7f22200000000000000000000000000000000000000000000000000000000000006001939091019283015250600301919050565b60008251615da9818460208701614c11565b7f7078000000000000000000000000000000000000000000000000000000000000920191825250600201919050565b7f783d000000000000000000000000000000000000000000000000000000000000815260008751615e10816002850160208c01614c11565b7f793d0000000000000000000000000000000000000000000000000000000000006002918401918201528751615e4d816004840160208c01614c11565b7f666f6e742d73697a653d00000000000000000000000000000000000000000000600492909101918201528651615e8b81600e840160208b01614c11565b7f666f6e742d66616d696c793d0000000000000000000000000000000000000000600e92909101918201528551615ec981601a840160208a01614c11565b01615ef6601a82017f66696c6c3d0000000000000000000000000000000000000000000000000000009052565b615f03601f82018661535e565b7f200000000000000000000000000000000000000000000000000000000000000081529050615f35600182018561535e565b7f20000000000000000000000000000000000000000000000000000000000000008152600101999850505050505050505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa264697066735822122070f18396ebf9b3bdc664dd05e66b332952b27e097d156a1e9455993b1ec7b70064736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Beef.sol:Beef",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2268,
        "contract": "contracts/Beef.sol:Beef",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2270,
        "contract": "contracts/Beef.sol:Beef",
        "label": "symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2274,
        "contract": "contracts/Beef.sol:Beef",
        "label": "getApproved",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2280,
        "contract": "contracts/Beef.sol:Beef",
        "label": "isApprovedForAll",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2284,
        "contract": "contracts/Beef.sol:Beef",
        "label": "_ownerOf",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2288,
        "contract": "contracts/Beef.sol:Beef",
        "label": "_balanceOf",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 315,
        "contract": "contracts/Beef.sol:Beef",
        "label": "totalSupply",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 318,
        "contract": "contracts/Beef.sol:Beef",
        "label": "editionSize",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 396,
        "contract": "contracts/Beef.sol:Beef",
        "label": "concepts",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(Concept)2953_storage)"
      },
      {
        "astId": 400,
        "contract": "contracts/Beef.sol:Beef",
        "label": "tokenIdToConcept",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 470,
        "contract": "contracts/Beef.sol:Beef",
        "label": "sameBlockAt",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 474,
        "contract": "contracts/Beef.sol:Beef",
        "label": "sameBlockTo",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 477,
        "contract": "contracts/Beef.sol:Beef",
        "label": "fairPrice",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 480,
        "contract": "contracts/Beef.sol:Beef",
        "label": "increasable",
        "offset": 0,
        "slot": "14",
        "type": "t_uint96"
      },
      {
        "astId": 483,
        "contract": "contracts/Beef.sol:Beef",
        "label": "decreasable",
        "offset": 12,
        "slot": "14",
        "type": "t_uint96"
      },
      {
        "astId": 486,
        "contract": "contracts/Beef.sol:Beef",
        "label": "transfersLeft",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2259,
        "contract": "contracts/Beef.sol:Beef",
        "label": "font",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Concept)2953_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ConceptStruct.Concept)",
        "numberOfBytes": "32",
        "value": "t_struct(Concept)2953_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Concept)2953_storage": {
        "encoding": "inplace",
        "label": "struct ConceptStruct.Concept",
        "members": [
          {
            "astId": 2939,
            "contract": "contracts/Beef.sol:Beef",
            "label": "_editionTokenRangeStart",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2941,
            "contract": "contracts/Beef.sol:Beef",
            "label": "_editionSize",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2943,
            "contract": "contracts/Beef.sol:Beef",
            "label": "_title",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 2946,
            "contract": "contracts/Beef.sol:Beef",
            "label": "_bodyText",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2949,
            "contract": "contracts/Beef.sol:Beef",
            "label": "_smallPrintText",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2952,
            "contract": "contracts/Beef.sol:Beef",
            "label": "_statusText",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_bytes32)dyn_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}